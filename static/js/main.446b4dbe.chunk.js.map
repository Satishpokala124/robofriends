{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","key","Scroll","style","overflow","border","height","children","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAACC,GAAW,IAChBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,WAAWC,IAAG,+BAA0BH,EAA1B,cACvB,6BACC,4BAAKF,GACL,2BAAIC,MCSOK,EAfE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAYD,EAAOE,KAAI,SAACC,EAAKC,GAC/B,OACA,kBAAC,EAAD,CAAMC,IAAOD,EACbT,GAAMK,EAAOI,GAAGT,GAAIF,KAAQO,EAAOI,GAAGX,KAAMC,MAASM,EAAOI,GAAGV,WAGnE,OACI,6BACKO,ICHEK,EARA,SAACd,GACZ,OACI,yBAAKe,MAAS,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjElB,EAAMmB,WCUJC,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACI,2BACAjB,UAAY,yDACZkB,KAAO,SACPC,YAAc,gBACdC,SAAUH,MCaPI,E,kDAnBX,WAAazB,GAAQ,IAAD,8BAChB,cAAMA,IACD0B,MAAQ,CACTC,UAAU,GAHE,E,8DAOFC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,mDAEJG,KAAK9B,MAAMmB,a,GAhBEa,aCmDbC,G,wDA3CX,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACTlB,OAAQ,GACR4B,YAAa,IAJP,E,gEAQM,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEvB,OAAOmC,S,+BAOhC,IAAD,EACwBb,KAAKJ,MAA3BlB,EADF,EACEA,OAAO4B,EADT,EACSA,YACRQ,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAGzD,OAAKvC,EAAOyC,OAIJ,yBAAK7C,UAAY,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWiB,aAAcS,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU1B,OAAQoC,OAR3B,wBAAIxC,UAAY,MAAhB,kB,GA3BD4B,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.446b4dbe.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n\tconst { name, email, id } = props;\n\treturn (\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t<img alt='Jane Doe' src={`https://robohash.org/${id}?200x200`}/>\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({robots}) => {\n\n    const cardArray = robots.map((user,i) => {\n        return( \n        <Card key = {i} \n        id = {robots[i].id} name = {robots[i].name} email = {robots[i].email} />\n        );\n    });\n    return (\n        <div>\n            {cardArray}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style = {{overflow: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div>\n            <input \n            className = 'pa3 ma3 ba b--green bg-lightest-blue shadow-5 br3 grow'\n            type = 'Search' \n            placeholder = \"Search Robots\"\n            onChange={searchChange}  \n            />\n        </div>\n        );\n};\n\nexport default SearchBox; ","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n    }\n\n    render() {\n        if(this.state.hasError){\n            return <h1>Oops. That's not it</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary","import React ,{Component} from 'react';\nimport CardList from '../components/CardList';\n// import {robots} from '../containers/robots';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        };\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ robots:users }))\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n\n    render() {\n        const {robots,searchfield} = this.state;\n        const filteredRobots = robots.filter(robot=>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n\n        if (!robots.length) {\n            return <h1 className = 'tc'>Loading...</h1>\n        }else {\n            return(\n                <div className = 'tc'>\n                    <h1 className='f1'>Robofriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n        \n    }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}